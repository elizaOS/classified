name: Build and Push Container Images

on:
  push:
    branches: [ main ]
    paths:
      - 'packages/game/**'
      - 'packages/core/**'
      - 'packages/server/**'
  pull_request:
    branches: [ main ]
    paths:
      - 'packages/game/**'
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_PREFIX: ${{ github.repository }}/eliza

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        image:
          - name: agent
            dockerfile: packages/game/src-backend/Dockerfile.agent.final
            context: packages/game
            description: ElizaOS Agent Runtime Container
          - name: postgres
            dockerfile: packages/game/containers/Dockerfile.postgres
            context: packages/game/containers
            description: PostgreSQL with pgvector for ElizaOS
          - name: ollama
            dockerfile: packages/game/containers/Dockerfile.ollama
            context: packages/game/containers
            description: Ollama with pre-loaded models for ElizaOS
          - name: ollama-lightweight
            dockerfile: packages/game/containers/Dockerfile.ollama-lightweight
            context: packages/game/containers
            description: Lightweight Ollama container

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'

    - name: Install dependencies
      run: npm ci
      working-directory: packages/game

    - name: Build backend
      run: npm run build:backend
      working-directory: packages/game

    - name: Create container definitions
      run: node scripts/build-production-containers.js
      working-directory: packages/game
      continue-on-error: true  # Allow to continue even if build fails due to missing Docker

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-${{ matrix.image.name }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Check if Dockerfile exists
      id: dockerfile-check
      run: |
        if [ -f "${{ matrix.image.dockerfile }}" ]; then
          echo "exists=true" >> $GITHUB_OUTPUT
        else
          echo "exists=false" >> $GITHUB_OUTPUT
          echo "Warning: Dockerfile ${{ matrix.image.dockerfile }} not found"
        fi

    - name: Build and push Docker image
      if: steps.dockerfile-check.outputs.exists == 'true'
      uses: docker/build-push-action@v5
      with:
        context: ${{ matrix.image.context }}
        file: ${{ matrix.image.dockerfile }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Create deployment artifact
      if: github.ref == 'refs/heads/main'
      run: |
        mkdir -p deployment-artifacts
        cp -r packages/game/dist-containers/* deployment-artifacts/ 2>/dev/null || true
        
        # Update docker-compose.yml to use the built images
        if [ -f "deployment-artifacts/docker-compose.yml" ]; then
          sed -i "s|elizaos/eliza-|${{ env.REGISTRY }}/${{ env.IMAGE_NAME_PREFIX }}-|g" deployment-artifacts/docker-compose.yml
        fi

    - name: Upload deployment artifacts
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v4
      with:
        name: eliza-container-deployment
        path: deployment-artifacts/
        retention-days: 30