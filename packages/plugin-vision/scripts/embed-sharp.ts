#!/usr/bin/env bun
import { existsSync, mkdirSync } from 'fs';
import { join, dirname } from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);
const packageRoot = join(__dirname, '..');

// Import runtimePlatformArch from sharp
const { runtimePlatformArch } = await import(
  join(packageRoot, 'node_modules/sharp/lib/libvips.js')
);

const runtimePlatform = runtimePlatformArch();
console.log(`üîç Detected platform: ${runtimePlatform}`);

// Build the path to the native module
const nativeModulePath = `./node_modules/sharp/src/build/Release/sharp-${runtimePlatform}.node`;
const fullPath = join(packageRoot, nativeModulePath);

// Check if the native module exists
if (!existsSync(fullPath)) {
  console.error(`‚ùå Native module not found at: ${fullPath}`);
  console.error(
    `üí° You may need to rebuild sharp from source or install platform-specific binaries`
  );
  process.exit(1);
}

// Create compile directory if it doesn't exist
const compileDir = join(packageRoot, 'compile');
if (!existsSync(compileDir)) {
  mkdirSync(compileDir, { recursive: true });
}

// Generate the import statement with correct relative path
const importPath = nativeModulePath.replace('./', '../');
const importStatement = `// Auto-generated by embed-sharp.ts
// This file embeds the sharp native module for platform: ${runtimePlatform}
import '${importPath}' with { type: 'file' };

// Export platform info for runtime verification
export const embeddedPlatform = '${runtimePlatform}';
`;

// Write the import file
const outputPath = join(compileDir, 'sharp.ts');
await Bun.write(outputPath, importStatement);

console.log(`‚úÖ Generated embed file at: ${outputPath}`);
console.log(`üì¶ Native module will be embedded from: ${nativeModulePath}`);
